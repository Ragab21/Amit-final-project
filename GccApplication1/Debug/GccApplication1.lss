
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000984  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  00000984  00000a18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800082  00800082  00000a3a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e4c  00000000  00000000  00000c38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b6f  00000000  00000000  00002a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011bb  00000000  00000000  000035f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  000047b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000099a  00000000  00000000  00004bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000016e0  00000000  00000000  00005592  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006c72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ae 38       	cpi	r26, 0x8E	; 142
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 c0 04 	jmp	0x980	; 0x980 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#include "main.h"


int main() 
{
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
  98:	cf 93       	push	r28
  9a:	df 93       	push	r29
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
  a0:	c5 54       	subi	r28, 0x45	; 69
  a2:	d1 09       	sbc	r29, r1
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	f8 94       	cli
  a8:	de bf       	out	0x3e, r29	; 62
  aa:	0f be       	out	0x3f, r0	; 63
  ac:	cd bf       	out	0x3d, r28	; 61
	ICU_Initialize();
  ae:	0e 94 61 03 	call	0x6c2	; 0x6c2 <ICU_Initialize>
	LCD_Initialize();
  b2:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Initialize>
	LCD_ClearScreen();
  b6:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_ClearScreen>
	FreqAndDuty results;
	
	results = Get_FreqAndDuty();
  ba:	ce 01       	movw	r24, r28
  bc:	8e 96       	adiw	r24, 0x2e	; 46
  be:	0e 94 6d 03 	call	0x6da	; 0x6da <Get_FreqAndDuty>
  c2:	88 e1       	ldi	r24, 0x18	; 24
  c4:	fe 01       	movw	r30, r28
  c6:	be 96       	adiw	r30, 0x2e	; 46
  c8:	de 01       	movw	r26, r28
  ca:	11 96       	adiw	r26, 0x01	; 1
  cc:	01 90       	ld	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	8a 95       	dec	r24
  d2:	e1 f7       	brne	.-8      	; 0xcc <main+0x3a>
	if(results.acceptable == 0)
  d4:	8e 89       	ldd	r24, Y+22	; 0x16
  d6:	81 11       	cpse	r24, r1
  d8:	06 c0       	rjmp	.+12     	; 0xe6 <main+0x54>
	{
		LCD_ClearScreen();
  da:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_ClearScreen>
		LCD_Display_String("OUT OF RANGE!!");
  de:	80 e6       	ldi	r24, 0x60	; 96
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	}
	char frequency[14];
	char duty_cy[7];
	strcpy(frequency,results.frequency);
  e6:	be 01       	movw	r22, r28
  e8:	6f 5f       	subi	r22, 0xFF	; 255
  ea:	7f 4f       	sbci	r23, 0xFF	; 255
  ec:	ce 01       	movw	r24, r28
  ee:	49 96       	adiw	r24, 0x19	; 25
  f0:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcpy>
	strcpy(duty_cy,results.duty_cy);
  f4:	be 01       	movw	r22, r28
  f6:	61 5f       	subi	r22, 0xF1	; 241
  f8:	7f 4f       	sbci	r23, 0xFF	; 255
  fa:	ce 01       	movw	r24, r28
  fc:	87 96       	adiw	r24, 0x27	; 39
  fe:	0e 94 53 04 	call	0x8a6	; 0x8a6 <strcpy>

	LCD_Display_String("F:");
 102:	8f e6       	ldi	r24, 0x6F	; 111
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	LCD_Display_String(frequency);
 10a:	ce 01       	movw	r24, r28
 10c:	49 96       	adiw	r24, 0x19	; 25
 10e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	LCD_Display_String("Hz ");
 112:	82 e7       	ldi	r24, 0x72	; 114
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>


	LCD_Display_String("D:");
 11a:	86 e7       	ldi	r24, 0x76	; 118
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	LCD_Display_String(duty_cy);
 122:	ce 01       	movw	r24, r28
 124:	87 96       	adiw	r24, 0x27	; 39
 126:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	LCD_Display_String("%");
 12a:	89 e7       	ldi	r24, 0x79	; 121
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	
	LCD_Display_Location(0,1);
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	0e 94 47 02 	call	0x48e	; 0x48e <LCD_Display_Location>
	uint8_t Dash = results.dutyCycle * 14 / 100;
 13a:	8f 89       	ldd	r24, Y+23	; 0x17
 13c:	98 8d       	ldd	r25, Y+24	; 0x18
 13e:	88 0f       	add	r24, r24
 140:	99 1f       	adc	r25, r25
 142:	9c 01       	movw	r18, r24
 144:	22 0f       	add	r18, r18
 146:	33 1f       	adc	r19, r19
 148:	22 0f       	add	r18, r18
 14a:	33 1f       	adc	r19, r19
 14c:	22 0f       	add	r18, r18
 14e:	33 1f       	adc	r19, r19
 150:	28 1b       	sub	r18, r24
 152:	39 0b       	sbc	r19, r25
 154:	36 95       	lsr	r19
 156:	27 95       	ror	r18
 158:	36 95       	lsr	r19
 15a:	27 95       	ror	r18
 15c:	ab e7       	ldi	r26, 0x7B	; 123
 15e:	b4 e1       	ldi	r27, 0x14	; 20
 160:	0e 94 44 04 	call	0x888	; 0x888 <__umulhisi3>
 164:	96 95       	lsr	r25
 166:	87 95       	ror	r24
 168:	f8 2e       	mov	r15, r24
	uint8_t Underscore = 14 - Dash;
 16a:	0e e0       	ldi	r16, 0x0E	; 14
 16c:	08 1b       	sub	r16, r24

	// Draw the impulse wave
	LCD_Display_String("|");
 16e:	8b e7       	ldi	r24, 0x7B	; 123
 170:	90 e0       	ldi	r25, 0x00	; 0
 172:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	for (uint8_t i = 0; i < Dash; i++) {
 176:	10 e0       	ldi	r17, 0x00	; 0
 178:	05 c0       	rjmp	.+10     	; 0x184 <main+0xf2>
	   LCD_Display_String("-");
 17a:	8d e7       	ldi	r24, 0x7D	; 125
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	uint8_t Dash = results.dutyCycle * 14 / 100;
	uint8_t Underscore = 14 - Dash;

	// Draw the impulse wave
	LCD_Display_String("|");
	for (uint8_t i = 0; i < Dash; i++) {
 182:	1f 5f       	subi	r17, 0xFF	; 255
 184:	1f 15       	cp	r17, r15
 186:	c8 f3       	brcs	.-14     	; 0x17a <main+0xe8>
 188:	10 e0       	ldi	r17, 0x00	; 0
 18a:	05 c0       	rjmp	.+10     	; 0x196 <main+0x104>
	   LCD_Display_String("-");
	}
	for (uint8_t i = 0; i < Underscore; i++) {
	    LCD_Display_String("_");
 18c:	8f e7       	ldi	r24, 0x7F	; 127
 18e:	90 e0       	ldi	r25, 0x00	; 0
 190:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	// Draw the impulse wave
	LCD_Display_String("|");
	for (uint8_t i = 0; i < Dash; i++) {
	   LCD_Display_String("-");
	}
	for (uint8_t i = 0; i < Underscore; i++) {
 194:	1f 5f       	subi	r17, 0xFF	; 255
 196:	10 17       	cp	r17, r16
 198:	c8 f3       	brcs	.-14     	; 0x18c <main+0xfa>
	    LCD_Display_String("_");
	}
	LCD_Display_String("|");
 19a:	8b e7       	ldi	r24, 0x7B	; 123
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 34 02 	call	0x468	; 0x468 <LCD_Display_String>
	
	return 0;
}
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	cb 5b       	subi	r28, 0xBB	; 187
 1a8:	df 4f       	sbci	r29, 0xFF	; 255
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	f8 94       	cli
 1ae:	de bf       	out	0x3e, r29	; 62
 1b0:	0f be       	out	0x3f, r0	; 63
 1b2:	cd bf       	out	0x3d, r28	; 61
 1b4:	df 91       	pop	r29
 1b6:	cf 91       	pop	r28
 1b8:	1f 91       	pop	r17
 1ba:	0f 91       	pop	r16
 1bc:	ff 90       	pop	r15
 1be:	08 95       	ret

000001c0 <__vector_9>:
extern uint8_t OVF1_Initial_Value;
extern uint32_t OVF1_NUM;


ISR(TIMER1_OVF_vect)
{
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	4f 93       	push	r20
 1cc:	5f 93       	push	r21
 1ce:	6f 93       	push	r22
 1d0:	7f 93       	push	r23
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
 1d6:	af 93       	push	r26
 1d8:	bf 93       	push	r27
	static uint8_t ovfCnt = 0;
	if(ovfCnt == OVF1_NUM)
 1da:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	a0 e0       	ldi	r26, 0x00	; 0
 1e2:	b0 e0       	ldi	r27, 0x00	; 0
 1e4:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <OVF1_NUM>
 1e8:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <OVF1_NUM+0x1>
 1ec:	60 91 86 00 	lds	r22, 0x0086	; 0x800086 <OVF1_NUM+0x2>
 1f0:	70 91 87 00 	lds	r23, 0x0087	; 0x800087 <OVF1_NUM+0x3>
 1f4:	84 17       	cp	r24, r20
 1f6:	95 07       	cpc	r25, r21
 1f8:	a6 07       	cpc	r26, r22
 1fa:	b7 07       	cpc	r27, r23
 1fc:	29 f4       	brne	.+10     	; 0x208 <__vector_9+0x48>
	{
		TCNT0 = OVF1_Initial_Value;
 1fe:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <OVF1_Initial_Value>
 202:	82 bf       	out	0x32, r24	; 50
		ovfCnt = 0;
 204:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <__data_end>
	}
	ovfCnt++;
 208:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 20c:	8f 5f       	subi	r24, 0xFF	; 255
 20e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 212:	bf 91       	pop	r27
 214:	af 91       	pop	r26
 216:	9f 91       	pop	r25
 218:	8f 91       	pop	r24
 21a:	7f 91       	pop	r23
 21c:	6f 91       	pop	r22
 21e:	5f 91       	pop	r21
 220:	4f 91       	pop	r20
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <LCD_Enable>:
void LCD_Display_FloatNumber(fint32_t Number, uint8_t AfterPoint)
{
	uint8_t String[33];
	LCD_FloatToString(Number, String, AfterPoint);
	LCD_Display_String(String);
}
 22c:	41 e0       	ldi	r20, 0x01	; 1
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 236:	87 e8       	ldi	r24, 0x87	; 135
 238:	93 e1       	ldi	r25, 0x13	; 19
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Enable+0xe>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Enable+0x14>
 240:	00 00       	nop
 242:	40 e0       	ldi	r20, 0x00	; 0
 244:	63 e0       	ldi	r22, 0x03	; 3
 246:	81 e0       	ldi	r24, 0x01	; 1
 248:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 24c:	08 95       	ret

0000024e <LCD_Send_Command>:
 24e:	cf 93       	push	r28
 250:	c8 2f       	mov	r28, r24
 252:	40 e0       	ldi	r20, 0x00	; 0
 254:	61 e0       	ldi	r22, 0x01	; 1
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 25c:	40 e0       	ldi	r20, 0x00	; 0
 25e:	62 e0       	ldi	r22, 0x02	; 2
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 266:	40 e0       	ldi	r20, 0x00	; 0
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 270:	8c 2f       	mov	r24, r28
 272:	80 7f       	andi	r24, 0xF0	; 240
 274:	8b bb       	out	0x1b, r24	; 27
 276:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 27a:	20 e1       	ldi	r18, 0x10	; 16
 27c:	c2 9f       	mul	r28, r18
 27e:	c0 01       	movw	r24, r0
 280:	11 24       	eor	r1, r1
 282:	8b bb       	out	0x1b, r24	; 27
 284:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 288:	83 ef       	ldi	r24, 0xF3	; 243
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <LCD_Send_Command+0x3e>
 290:	00 c0       	rjmp	.+0      	; 0x292 <LCD_Send_Command+0x44>
 292:	00 00       	nop
 294:	c6 30       	cpi	r28, 0x06	; 6
 296:	11 f0       	breq	.+4      	; 0x29c <LCD_Send_Command+0x4e>
 298:	c8 31       	cpi	r28, 0x18	; 24
 29a:	11 f4       	brne	.+4      	; 0x2a0 <LCD_Send_Command+0x52>
 29c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <CursorDirection>
 2a0:	c4 30       	cpi	r28, 0x04	; 4
 2a2:	11 f0       	breq	.+4      	; 0x2a8 <LCD_Send_Command+0x5a>
 2a4:	cc 31       	cpi	r28, 0x1C	; 28
 2a6:	19 f4       	brne	.+6      	; 0x2ae <LCD_Send_Command+0x60>
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <CursorDirection>
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <LCD_HomeScreen>:
 2b2:	82 e0       	ldi	r24, 0x02	; 2
 2b4:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 2b8:	8b e1       	ldi	r24, 0x1B	; 27
 2ba:	95 e2       	ldi	r25, 0x25	; 37
 2bc:	01 97       	sbiw	r24, 0x01	; 1
 2be:	f1 f7       	brne	.-4      	; 0x2bc <LCD_HomeScreen+0xa>
 2c0:	00 c0       	rjmp	.+0      	; 0x2c2 <LCD_HomeScreen+0x10>
 2c2:	00 00       	nop
 2c4:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <Character_Counter>
 2c8:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <Character_Counter+0x1>
 2cc:	10 92 8c 00 	sts	0x008C, r1	; 0x80008c <Character_Counter+0x2>
 2d0:	10 92 8d 00 	sts	0x008D, r1	; 0x80008d <Character_Counter+0x3>
 2d4:	08 95       	ret

000002d6 <LCD_ClearScreen>:
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 2dc:	0e 94 59 01 	call	0x2b2	; 0x2b2 <LCD_HomeScreen>
 2e0:	8b e1       	ldi	r24, 0x1B	; 27
 2e2:	95 e2       	ldi	r25, 0x25	; 37
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	f1 f7       	brne	.-4      	; 0x2e4 <LCD_ClearScreen+0xe>
 2e8:	00 c0       	rjmp	.+0      	; 0x2ea <LCD_ClearScreen+0x14>
 2ea:	00 00       	nop
 2ec:	08 95       	ret

000002ee <LCD_Initialize>:
 2ee:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <Initialized.2058>
 2f2:	81 11       	cpse	r24, r1
 2f4:	40 c0       	rjmp	.+128    	; 0x376 <LCD_Initialize+0x88>
 2f6:	41 e0       	ldi	r20, 0x01	; 1
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	62 e0       	ldi	r22, 0x02	; 2
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	61 e0       	ldi	r22, 0x01	; 1
 30e:	81 e0       	ldi	r24, 0x01	; 1
 310:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	63 e0       	ldi	r22, 0x03	; 3
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 31e:	41 e0       	ldi	r20, 0x01	; 1
 320:	64 e0       	ldi	r22, 0x04	; 4
 322:	81 e0       	ldi	r24, 0x01	; 1
 324:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	65 e0       	ldi	r22, 0x05	; 5
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 332:	41 e0       	ldi	r20, 0x01	; 1
 334:	66 e0       	ldi	r22, 0x06	; 6
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 7f 02 	call	0x4fe	; 0x4fe <DIO_SetPinDirection>
 33c:	2f e5       	ldi	r18, 0x5F	; 95
 33e:	8a ee       	ldi	r24, 0xEA	; 234
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <LCD_Initialize+0x54>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <LCD_Initialize+0x5e>
 34c:	00 00       	nop
 34e:	83 e3       	ldi	r24, 0x33	; 51
 350:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 354:	82 e3       	ldi	r24, 0x32	; 50
 356:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 35a:	88 e2       	ldi	r24, 0x28	; 40
 35c:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 366:	86 e0       	ldi	r24, 0x06	; 6
 368:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 36c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_ClearScreen>
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <Initialized.2058>
 376:	08 95       	ret

00000378 <LCD_LineCheck>:
 378:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Character_Counter>
 37c:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Character_Counter+0x1>
 380:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <Character_Counter+0x2>
 384:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <Character_Counter+0x3>
 388:	ac 01       	movw	r20, r24
 38a:	bd 01       	movw	r22, r26
 38c:	4f 71       	andi	r20, 0x1F	; 31
 38e:	55 27       	eor	r21, r21
 390:	66 27       	eor	r22, r22
 392:	77 27       	eor	r23, r23
 394:	45 2b       	or	r20, r21
 396:	46 2b       	or	r20, r22
 398:	47 2b       	or	r20, r23
 39a:	31 f4       	brne	.+12     	; 0x3a8 <LCD_LineCheck+0x30>
 39c:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <LCD_ClearScreen>
 3a0:	80 e8       	ldi	r24, 0x80	; 128
 3a2:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 3a6:	08 95       	ret
 3a8:	8f 70       	andi	r24, 0x0F	; 15
 3aa:	99 27       	eor	r25, r25
 3ac:	aa 27       	eor	r26, r26
 3ae:	bb 27       	eor	r27, r27
 3b0:	89 2b       	or	r24, r25
 3b2:	8a 2b       	or	r24, r26
 3b4:	8b 2b       	or	r24, r27
 3b6:	19 f4       	brne	.+6      	; 0x3be <LCD_LineCheck+0x46>
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
 3be:	08 95       	ret

000003c0 <LCD_Display_Character>:
 3c0:	cf 93       	push	r28
 3c2:	c8 2f       	mov	r28, r24
 3c4:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Initialize>
 3c8:	0e 94 bc 01 	call	0x378	; 0x378 <LCD_LineCheck>
 3cc:	41 e0       	ldi	r20, 0x01	; 1
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	63 e0       	ldi	r22, 0x03	; 3
 3e4:	81 e0       	ldi	r24, 0x01	; 1
 3e6:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <DIO_SetPinValue>
 3ea:	8c 2f       	mov	r24, r28
 3ec:	80 7f       	andi	r24, 0xF0	; 240
 3ee:	8b bb       	out	0x1b, r24	; 27
 3f0:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 3f4:	20 e1       	ldi	r18, 0x10	; 16
 3f6:	c2 9f       	mul	r28, r18
 3f8:	c0 01       	movw	r24, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	8b bb       	out	0x1b, r24	; 27
 3fe:	0e 94 16 01 	call	0x22c	; 0x22c <LCD_Enable>
 402:	83 ef       	ldi	r24, 0xF3	; 243
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
 40e:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <CursorDirection>
 412:	88 23       	and	r24, r24
 414:	a1 f0       	breq	.+40     	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 416:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Character_Counter>
 41a:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Character_Counter+0x1>
 41e:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <Character_Counter+0x2>
 422:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <Character_Counter+0x3>
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	a1 09       	sbc	r26, r1
 42a:	b1 09       	sbc	r27, r1
 42c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Character_Counter>
 430:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Character_Counter+0x1>
 434:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Character_Counter+0x2>
 438:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Character_Counter+0x3>
 43c:	13 c0       	rjmp	.+38     	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 43e:	80 91 8a 00 	lds	r24, 0x008A	; 0x80008a <Character_Counter>
 442:	90 91 8b 00 	lds	r25, 0x008B	; 0x80008b <Character_Counter+0x1>
 446:	a0 91 8c 00 	lds	r26, 0x008C	; 0x80008c <Character_Counter+0x2>
 44a:	b0 91 8d 00 	lds	r27, 0x008D	; 0x80008d <Character_Counter+0x3>
 44e:	01 96       	adiw	r24, 0x01	; 1
 450:	a1 1d       	adc	r26, r1
 452:	b1 1d       	adc	r27, r1
 454:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Character_Counter>
 458:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Character_Counter+0x1>
 45c:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Character_Counter+0x2>
 460:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Character_Counter+0x3>
 464:	cf 91       	pop	r28
 466:	08 95       	ret

00000468 <LCD_Display_String>:
 468:	0f 93       	push	r16
 46a:	1f 93       	push	r17
 46c:	cf 93       	push	r28
 46e:	8c 01       	movw	r16, r24
 470:	c0 e0       	ldi	r28, 0x00	; 0
 472:	03 c0       	rjmp	.+6      	; 0x47a <LCD_Display_String+0x12>
 474:	cf 5f       	subi	r28, 0xFF	; 255
 476:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <LCD_Display_Character>
 47a:	f8 01       	movw	r30, r16
 47c:	ec 0f       	add	r30, r28
 47e:	f1 1d       	adc	r31, r1
 480:	80 81       	ld	r24, Z
 482:	81 11       	cpse	r24, r1
 484:	f7 cf       	rjmp	.-18     	; 0x474 <LCD_Display_String+0xc>
 486:	cf 91       	pop	r28
 488:	1f 91       	pop	r17
 48a:	0f 91       	pop	r16
 48c:	08 95       	ret

0000048e <LCD_Display_Location>:
void LCD_Display_Location(uint8_t xAxis, uint8_t yAxis)
{
 48e:	ff 92       	push	r15
 490:	0f 93       	push	r16
 492:	1f 93       	push	r17
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	00 d0       	rcall	.+0      	; 0x49a <LCD_Display_Location+0xc>
 49a:	cd b7       	in	r28, 0x3d	; 61
 49c:	de b7       	in	r29, 0x3e	; 62
 49e:	f8 2e       	mov	r15, r24
 4a0:	06 2f       	mov	r16, r22
	LCD_Initialize();
 4a2:	0e 94 77 01 	call	0x2ee	; 0x2ee <LCD_Initialize>
	uint8_t RowAddress[2] = {0x80, 0xC0};
 4a6:	80 e8       	ldi	r24, 0x80	; 128
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	80 ec       	ldi	r24, 0xC0	; 192
 4ac:	8a 83       	std	Y+2, r24	; 0x02
	LCD_Send_Command(RowAddress[yAxis] + xAxis);
 4ae:	10 e0       	ldi	r17, 0x00	; 0
 4b0:	e1 e0       	ldi	r30, 0x01	; 1
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ec 0f       	add	r30, r28
 4b6:	fd 1f       	adc	r31, r29
 4b8:	e0 0f       	add	r30, r16
 4ba:	f1 1f       	adc	r31, r17
 4bc:	80 81       	ld	r24, Z
 4be:	8f 0d       	add	r24, r15
 4c0:	0e 94 27 01 	call	0x24e	; 0x24e <LCD_Send_Command>
	Character_Counter = (yAxis * 16) + (xAxis);
 4c4:	c8 01       	movw	r24, r16
 4c6:	82 95       	swap	r24
 4c8:	92 95       	swap	r25
 4ca:	90 7f       	andi	r25, 0xF0	; 240
 4cc:	98 27       	eor	r25, r24
 4ce:	80 7f       	andi	r24, 0xF0	; 240
 4d0:	98 27       	eor	r25, r24
 4d2:	8f 0d       	add	r24, r15
 4d4:	91 1d       	adc	r25, r1
 4d6:	09 2e       	mov	r0, r25
 4d8:	00 0c       	add	r0, r0
 4da:	aa 0b       	sbc	r26, r26
 4dc:	bb 0b       	sbc	r27, r27
 4de:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <Character_Counter>
 4e2:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <Character_Counter+0x1>
 4e6:	a0 93 8c 00 	sts	0x008C, r26	; 0x80008c <Character_Counter+0x2>
 4ea:	b0 93 8d 00 	sts	0x008D, r27	; 0x80008d <Character_Counter+0x3>
}
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	ff 90       	pop	r15
 4fc:	08 95       	ret

000004fe <DIO_SetPinDirection>:
#include "DIO_Private.h"

/*------------------------PINS---------------------------*/
void DIO_SetPinDirection(port Port, pin Pin, state State)
{
	switch(State)
 4fe:	44 23       	and	r20, r20
 500:	19 f0       	breq	.+6      	; 0x508 <DIO_SetPinDirection+0xa>
 502:	41 30       	cpi	r20, 0x01	; 1
 504:	c9 f1       	breq	.+114    	; 0x578 <DIO_SetPinDirection+0x7a>
 506:	08 95       	ret
	{
		case DIO_INPUT:
		switch (Port)
 508:	81 30       	cpi	r24, 0x01	; 1
 50a:	91 f0       	breq	.+36     	; 0x530 <DIO_SetPinDirection+0x32>
 50c:	28 f0       	brcs	.+10     	; 0x518 <DIO_SetPinDirection+0x1a>
 50e:	82 30       	cpi	r24, 0x02	; 2
 510:	d9 f0       	breq	.+54     	; 0x548 <DIO_SetPinDirection+0x4a>
 512:	83 30       	cpi	r24, 0x03	; 3
 514:	29 f1       	breq	.+74     	; 0x560 <DIO_SetPinDirection+0x62>
 516:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, Pin);
 518:	2a b3       	in	r18, 0x1a	; 26
 51a:	81 e0       	ldi	r24, 0x01	; 1
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	02 c0       	rjmp	.+4      	; 0x524 <DIO_SetPinDirection+0x26>
 520:	88 0f       	add	r24, r24
 522:	99 1f       	adc	r25, r25
 524:	6a 95       	dec	r22
 526:	e2 f7       	brpl	.-8      	; 0x520 <DIO_SetPinDirection+0x22>
 528:	80 95       	com	r24
 52a:	82 23       	and	r24, r18
 52c:	8a bb       	out	0x1a, r24	; 26
			break;
 52e:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, Pin);
 530:	27 b3       	in	r18, 0x17	; 23
 532:	81 e0       	ldi	r24, 0x01	; 1
 534:	90 e0       	ldi	r25, 0x00	; 0
 536:	02 c0       	rjmp	.+4      	; 0x53c <DIO_SetPinDirection+0x3e>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	6a 95       	dec	r22
 53e:	e2 f7       	brpl	.-8      	; 0x538 <DIO_SetPinDirection+0x3a>
 540:	80 95       	com	r24
 542:	82 23       	and	r24, r18
 544:	87 bb       	out	0x17, r24	; 23
			break;
 546:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, Pin);
 548:	24 b3       	in	r18, 0x14	; 20
 54a:	81 e0       	ldi	r24, 0x01	; 1
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	02 c0       	rjmp	.+4      	; 0x554 <DIO_SetPinDirection+0x56>
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	6a 95       	dec	r22
 556:	e2 f7       	brpl	.-8      	; 0x550 <DIO_SetPinDirection+0x52>
 558:	80 95       	com	r24
 55a:	82 23       	and	r24, r18
 55c:	84 bb       	out	0x14, r24	; 20
			break;
 55e:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, Pin);
 560:	21 b3       	in	r18, 0x11	; 17
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <DIO_SetPinDirection+0x6e>
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	6a 95       	dec	r22
 56e:	e2 f7       	brpl	.-8      	; 0x568 <DIO_SetPinDirection+0x6a>
 570:	80 95       	com	r24
 572:	82 23       	and	r24, r18
 574:	81 bb       	out	0x11, r24	; 17
			break;
 576:	08 95       	ret
		}
		break;
		case DIO_OUTPUT:
		switch (Port)
 578:	81 30       	cpi	r24, 0x01	; 1
 57a:	89 f0       	breq	.+34     	; 0x59e <DIO_SetPinDirection+0xa0>
 57c:	28 f0       	brcs	.+10     	; 0x588 <DIO_SetPinDirection+0x8a>
 57e:	82 30       	cpi	r24, 0x02	; 2
 580:	c9 f0       	breq	.+50     	; 0x5b4 <DIO_SetPinDirection+0xb6>
 582:	83 30       	cpi	r24, 0x03	; 3
 584:	11 f1       	breq	.+68     	; 0x5ca <DIO_SetPinDirection+0xcc>
 586:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, Pin);
 588:	2a b3       	in	r18, 0x1a	; 26
 58a:	81 e0       	ldi	r24, 0x01	; 1
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	02 c0       	rjmp	.+4      	; 0x594 <DIO_SetPinDirection+0x96>
 590:	88 0f       	add	r24, r24
 592:	99 1f       	adc	r25, r25
 594:	6a 95       	dec	r22
 596:	e2 f7       	brpl	.-8      	; 0x590 <DIO_SetPinDirection+0x92>
 598:	82 2b       	or	r24, r18
 59a:	8a bb       	out	0x1a, r24	; 26
			break;
 59c:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, Pin);
 59e:	27 b3       	in	r18, 0x17	; 23
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <DIO_SetPinDirection+0xac>
 5a6:	88 0f       	add	r24, r24
 5a8:	99 1f       	adc	r25, r25
 5aa:	6a 95       	dec	r22
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <DIO_SetPinDirection+0xa8>
 5ae:	82 2b       	or	r24, r18
 5b0:	87 bb       	out	0x17, r24	; 23
			break;
 5b2:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, Pin);
 5b4:	24 b3       	in	r18, 0x14	; 20
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e0       	ldi	r25, 0x00	; 0
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <DIO_SetPinDirection+0xc2>
 5bc:	88 0f       	add	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	6a 95       	dec	r22
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <DIO_SetPinDirection+0xbe>
 5c4:	82 2b       	or	r24, r18
 5c6:	84 bb       	out	0x14, r24	; 20
			break;
 5c8:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, Pin);
 5ca:	21 b3       	in	r18, 0x11	; 17
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <DIO_SetPinDirection+0xd8>
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	6a 95       	dec	r22
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <DIO_SetPinDirection+0xd4>
 5da:	82 2b       	or	r24, r18
 5dc:	81 bb       	out	0x11, r24	; 17
 5de:	08 95       	ret

000005e0 <DIO_SetPinValue>:
		break;
	}
}
void DIO_SetPinValue(port Port, pin Pin, status Status)
{
	switch(Status)
 5e0:	44 23       	and	r20, r20
 5e2:	19 f0       	breq	.+6      	; 0x5ea <DIO_SetPinValue+0xa>
 5e4:	41 30       	cpi	r20, 0x01	; 1
 5e6:	c9 f1       	breq	.+114    	; 0x65a <DIO_SetPinValue+0x7a>
 5e8:	08 95       	ret
	{
		case DIO_LOW:
		switch (Port)
 5ea:	81 30       	cpi	r24, 0x01	; 1
 5ec:	91 f0       	breq	.+36     	; 0x612 <DIO_SetPinValue+0x32>
 5ee:	28 f0       	brcs	.+10     	; 0x5fa <DIO_SetPinValue+0x1a>
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	d9 f0       	breq	.+54     	; 0x62a <DIO_SetPinValue+0x4a>
 5f4:	83 30       	cpi	r24, 0x03	; 3
 5f6:	29 f1       	breq	.+74     	; 0x642 <DIO_SetPinValue+0x62>
 5f8:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, Pin);
 5fa:	2b b3       	in	r18, 0x1b	; 27
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	02 c0       	rjmp	.+4      	; 0x606 <DIO_SetPinValue+0x26>
 602:	88 0f       	add	r24, r24
 604:	99 1f       	adc	r25, r25
 606:	6a 95       	dec	r22
 608:	e2 f7       	brpl	.-8      	; 0x602 <DIO_SetPinValue+0x22>
 60a:	80 95       	com	r24
 60c:	82 23       	and	r24, r18
 60e:	8b bb       	out	0x1b, r24	; 27
			break;
 610:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, Pin);
 612:	28 b3       	in	r18, 0x18	; 24
 614:	81 e0       	ldi	r24, 0x01	; 1
 616:	90 e0       	ldi	r25, 0x00	; 0
 618:	02 c0       	rjmp	.+4      	; 0x61e <DIO_SetPinValue+0x3e>
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	6a 95       	dec	r22
 620:	e2 f7       	brpl	.-8      	; 0x61a <DIO_SetPinValue+0x3a>
 622:	80 95       	com	r24
 624:	82 23       	and	r24, r18
 626:	88 bb       	out	0x18, r24	; 24
			break;
 628:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, Pin);
 62a:	25 b3       	in	r18, 0x15	; 21
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	90 e0       	ldi	r25, 0x00	; 0
 630:	02 c0       	rjmp	.+4      	; 0x636 <DIO_SetPinValue+0x56>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	6a 95       	dec	r22
 638:	e2 f7       	brpl	.-8      	; 0x632 <DIO_SetPinValue+0x52>
 63a:	80 95       	com	r24
 63c:	82 23       	and	r24, r18
 63e:	85 bb       	out	0x15, r24	; 21
			break;
 640:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, Pin);
 642:	22 b3       	in	r18, 0x12	; 18
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_SetPinValue+0x6e>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_SetPinValue+0x6a>
 652:	80 95       	com	r24
 654:	82 23       	and	r24, r18
 656:	82 bb       	out	0x12, r24	; 18
			break;
 658:	08 95       	ret
		}
		break;
		case DIO_HIGH:
		switch (Port)
 65a:	81 30       	cpi	r24, 0x01	; 1
 65c:	89 f0       	breq	.+34     	; 0x680 <DIO_SetPinValue+0xa0>
 65e:	28 f0       	brcs	.+10     	; 0x66a <DIO_SetPinValue+0x8a>
 660:	82 30       	cpi	r24, 0x02	; 2
 662:	c9 f0       	breq	.+50     	; 0x696 <DIO_SetPinValue+0xb6>
 664:	83 30       	cpi	r24, 0x03	; 3
 666:	11 f1       	breq	.+68     	; 0x6ac <DIO_SetPinValue+0xcc>
 668:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, Pin);
 66a:	2b b3       	in	r18, 0x1b	; 27
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	02 c0       	rjmp	.+4      	; 0x676 <DIO_SetPinValue+0x96>
 672:	88 0f       	add	r24, r24
 674:	99 1f       	adc	r25, r25
 676:	6a 95       	dec	r22
 678:	e2 f7       	brpl	.-8      	; 0x672 <DIO_SetPinValue+0x92>
 67a:	82 2b       	or	r24, r18
 67c:	8b bb       	out	0x1b, r24	; 27
			break;
 67e:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, Pin);
 680:	28 b3       	in	r18, 0x18	; 24
 682:	81 e0       	ldi	r24, 0x01	; 1
 684:	90 e0       	ldi	r25, 0x00	; 0
 686:	02 c0       	rjmp	.+4      	; 0x68c <DIO_SetPinValue+0xac>
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	6a 95       	dec	r22
 68e:	e2 f7       	brpl	.-8      	; 0x688 <DIO_SetPinValue+0xa8>
 690:	82 2b       	or	r24, r18
 692:	88 bb       	out	0x18, r24	; 24
			break;
 694:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, Pin);
 696:	25 b3       	in	r18, 0x15	; 21
 698:	81 e0       	ldi	r24, 0x01	; 1
 69a:	90 e0       	ldi	r25, 0x00	; 0
 69c:	02 c0       	rjmp	.+4      	; 0x6a2 <DIO_SetPinValue+0xc2>
 69e:	88 0f       	add	r24, r24
 6a0:	99 1f       	adc	r25, r25
 6a2:	6a 95       	dec	r22
 6a4:	e2 f7       	brpl	.-8      	; 0x69e <DIO_SetPinValue+0xbe>
 6a6:	82 2b       	or	r24, r18
 6a8:	85 bb       	out	0x15, r24	; 21
			break;
 6aa:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, Pin);
 6ac:	22 b3       	in	r18, 0x12	; 18
 6ae:	81 e0       	ldi	r24, 0x01	; 1
 6b0:	90 e0       	ldi	r25, 0x00	; 0
 6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <DIO_SetPinValue+0xd8>
 6b4:	88 0f       	add	r24, r24
 6b6:	99 1f       	adc	r25, r25
 6b8:	6a 95       	dec	r22
 6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <DIO_SetPinValue+0xd4>
 6bc:	82 2b       	or	r24, r18
 6be:	82 bb       	out	0x12, r24	; 18
 6c0:	08 95       	ret

000006c2 <ICU_Initialize>:
	 OVF1_NUM++;
}

void ICU_Initialize(void)
{
	TCCR1B |= (1<<ICES1);
 6c2:	8e b5       	in	r24, 0x2e	; 46
 6c4:	80 64       	ori	r24, 0x40	; 64
 6c6:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &=~ ((1<<WGM13)|(1<<WGM12));
 6c8:	8e b5       	in	r24, 0x2e	; 46
 6ca:	87 7e       	andi	r24, 0xE7	; 231
 6cc:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &=~ ((1<<CS12)|(1<<CS11)|(1<<CS10));
 6ce:	8e b5       	in	r24, 0x2e	; 46
 6d0:	88 7f       	andi	r24, 0xF8	; 248
 6d2:	8e bd       	out	0x2e, r24	; 46
	PORTD = 0xFF;
 6d4:	8f ef       	ldi	r24, 0xFF	; 255
 6d6:	82 bb       	out	0x12, r24	; 18
 6d8:	08 95       	ret

000006da <Get_FreqAndDuty>:
}

FreqAndDuty Get_FreqAndDuty(void)
{
 6da:	4f 92       	push	r4
 6dc:	5f 92       	push	r5
 6de:	6f 92       	push	r6
 6e0:	7f 92       	push	r7
 6e2:	8f 92       	push	r8
 6e4:	9f 92       	push	r9
 6e6:	af 92       	push	r10
 6e8:	bf 92       	push	r11
 6ea:	ef 92       	push	r14
 6ec:	ff 92       	push	r15
 6ee:	0f 93       	push	r16
 6f0:	1f 93       	push	r17
 6f2:	cf 93       	push	r28
 6f4:	df 93       	push	r29
 6f6:	cd b7       	in	r28, 0x3d	; 61
 6f8:	de b7       	in	r29, 0x3e	; 62
 6fa:	68 97       	sbiw	r28, 0x18	; 24
 6fc:	0f b6       	in	r0, 0x3f	; 63
 6fe:	f8 94       	cli
 700:	de bf       	out	0x3e, r29	; 62
 702:	0f be       	out	0x3f, r0	; 63
 704:	cd bf       	out	0x3d, r28	; 61
 706:	8c 01       	movw	r16, r24
	FreqAndDuty restults;
	restults.acceptable = 1;
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	8e 8b       	std	Y+22, r24	; 0x16
	uint16_t a,b,c,high,period;
	uint8_t duty_cycle;
	TCCR1A = 0;
 70c:	1f bc       	out	0x2f, r1	; 47
	TCNT1=0;
 70e:	1d bc       	out	0x2d, r1	; 45
 710:	1c bc       	out	0x2c, r1	; 44
	TIFR = (1<<ICF1);  	/* Clear ICF (Input Capture flag) flag */
 712:	80 e2       	ldi	r24, 0x20	; 32
 714:	88 bf       	out	0x38, r24	; 56

	TCCR1B = 0x41;  	/* Rising edge, no prescaler */
 716:	81 e4       	ldi	r24, 0x41	; 65
 718:	8e bd       	out	0x2e, r24	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 71a:	08 b6       	in	r0, 0x38	; 56
 71c:	05 fe       	sbrs	r0, 5
 71e:	fd cf       	rjmp	.-6      	; 0x71a <Get_FreqAndDuty+0x40>
	a = ICR1;  		/* Take value of capture register */
 720:	86 b5       	in	r24, 0x26	; 38
 722:	97 b5       	in	r25, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 724:	20 e2       	ldi	r18, 0x20	; 32
 726:	28 bf       	out	0x38, r18	; 56
	
	TCCR1B = 0x01;  	/* Falling edge, no prescaler */
 728:	21 e0       	ldi	r18, 0x01	; 1
 72a:	2e bd       	out	0x2e, r18	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 72c:	08 b6       	in	r0, 0x38	; 56
 72e:	05 fe       	sbrs	r0, 5
 730:	fd cf       	rjmp	.-6      	; 0x72c <Get_FreqAndDuty+0x52>
	b = ICR1;  		/* Take value of capture register */
 732:	26 b5       	in	r18, 0x26	; 38
 734:	37 b5       	in	r19, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 736:	40 e2       	ldi	r20, 0x20	; 32
 738:	48 bf       	out	0x38, r20	; 56
	
	TCCR1B = 0x41;  	/* Rising edge, no prescaler */
 73a:	41 e4       	ldi	r20, 0x41	; 65
 73c:	4e bd       	out	0x2e, r20	; 46
	while ((TIFR&(1<<ICF1)) == 0);
 73e:	08 b6       	in	r0, 0x38	; 56
 740:	05 fe       	sbrs	r0, 5
 742:	fd cf       	rjmp	.-6      	; 0x73e <Get_FreqAndDuty+0x64>
	c = ICR1;  		/* Take value of capture register */
 744:	86 b4       	in	r8, 0x26	; 38
 746:	97 b4       	in	r9, 0x27	; 39
	TIFR = (1<<ICF1);  	/* Clear ICF flag */
 748:	40 e2       	ldi	r20, 0x20	; 32
 74a:	48 bf       	out	0x38, r20	; 56

	TCCR1B = 0;  		/* Stop the timer */
 74c:	1e bc       	out	0x2e, r1	; 46
	
	if(a<b && b<c)  	/* Check for valid condition, 
 74e:	82 17       	cp	r24, r18
 750:	93 07       	cpc	r25, r19
 752:	88 f5       	brcc	.+98     	; 0x7b6 <Get_FreqAndDuty+0xdc>
 754:	28 15       	cp	r18, r8
 756:	39 05       	cpc	r19, r9
 758:	70 f5       	brcc	.+92     	; 0x7b6 <Get_FreqAndDuty+0xdc>
				to avoid timer overflow reading */
	{
		high=b-a;
 75a:	79 01       	movw	r14, r18
 75c:	e8 1a       	sub	r14, r24
 75e:	f9 0a       	sbc	r15, r25
		period=c-a;
 760:	88 1a       	sub	r8, r24
 762:	99 0a       	sbc	r9, r25
		
		uint32_t freq= F_CPU/period;/* Calculate frequency */
 764:	a1 2c       	mov	r10, r1
 766:	b1 2c       	mov	r11, r1
 768:	60 e0       	ldi	r22, 0x00	; 0
 76a:	7d e2       	ldi	r23, 0x2D	; 45
 76c:	81 e3       	ldi	r24, 0x31	; 49
 76e:	91 e0       	ldi	r25, 0x01	; 1
 770:	a5 01       	movw	r20, r10
 772:	94 01       	movw	r18, r8
 774:	0e 94 25 04 	call	0x84a	; 0x84a <__divmodsi4>
 778:	29 01       	movw	r4, r18
 77a:	3a 01       	movw	r6, r20

		/* Calculate duty cycle */
		duty_cycle = (uint8_t)(((uint32_t)high * 100) / period);
 77c:	97 01       	movw	r18, r14
 77e:	a4 e6       	ldi	r26, 0x64	; 100
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	0e 94 44 04 	call	0x888	; 0x888 <__umulhisi3>
 786:	a5 01       	movw	r20, r10
 788:	94 01       	movw	r18, r8
 78a:	0e 94 03 04 	call	0x806	; 0x806 <__udivmodsi4>
 78e:	e2 2e       	mov	r14, r18
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__ltoa_ncheck (long, char *, unsigned char);
	return __ltoa_ncheck (__val, __s, __radix);
 790:	2a e0       	ldi	r18, 0x0A	; 10
 792:	ae 01       	movw	r20, r28
 794:	4f 5f       	subi	r20, 0xFF	; 255
 796:	5f 4f       	sbci	r21, 0xFF	; 255
 798:	c3 01       	movw	r24, r6
 79a:	b2 01       	movw	r22, r4
 79c:	0e 94 65 04 	call	0x8ca	; 0x8ca <__ltoa_ncheck>
		ltoa(freq, restults.frequency, 10);
		itoa(duty_cycle, restults.duty_cy, 10);
 7a0:	f1 2c       	mov	r15, r1
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 7a2:	4a e0       	ldi	r20, 0x0A	; 10
 7a4:	be 01       	movw	r22, r28
 7a6:	61 5f       	subi	r22, 0xF1	; 241
 7a8:	7f 4f       	sbci	r23, 0xFF	; 255
 7aa:	c7 01       	movw	r24, r14
 7ac:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <__itoa_ncheck>
		restults.dutyCycle = duty_cycle;
 7b0:	f8 8e       	std	Y+24, r15	; 0x18
 7b2:	ef 8a       	std	Y+23, r14	; 0x17

	TCCR1B = 0;  		/* Stop the timer */
	
	if(a<b && b<c)  	/* Check for valid condition, 
				to avoid timer overflow reading */
	{
 7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <Get_FreqAndDuty+0xde>
		restults.dutyCycle = duty_cycle;

	}
		else
		{
			restults.acceptable = 0;
 7b6:	1e 8a       	std	Y+22, r1	; 0x16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7b8:	2f e3       	ldi	r18, 0x3F	; 63
 7ba:	8d e0       	ldi	r24, 0x0D	; 13
 7bc:	93 e0       	ldi	r25, 0x03	; 3
 7be:	21 50       	subi	r18, 0x01	; 1
 7c0:	80 40       	sbci	r24, 0x00	; 0
 7c2:	90 40       	sbci	r25, 0x00	; 0
 7c4:	e1 f7       	brne	.-8      	; 0x7be <Get_FreqAndDuty+0xe4>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <Get_FreqAndDuty+0xee>
 7c8:	00 00       	nop
		}
		_delay_ms(50);
		return restults;
 7ca:	88 e1       	ldi	r24, 0x18	; 24
 7cc:	fe 01       	movw	r30, r28
 7ce:	31 96       	adiw	r30, 0x01	; 1
 7d0:	d8 01       	movw	r26, r16
 7d2:	01 90       	ld	r0, Z+
 7d4:	0d 92       	st	X+, r0
 7d6:	8a 95       	dec	r24
 7d8:	e1 f7       	brne	.-8      	; 0x7d2 <Get_FreqAndDuty+0xf8>
 7da:	c8 01       	movw	r24, r16
 7dc:	68 96       	adiw	r28, 0x18	; 24
 7de:	0f b6       	in	r0, 0x3f	; 63
 7e0:	f8 94       	cli
 7e2:	de bf       	out	0x3e, r29	; 62
 7e4:	0f be       	out	0x3f, r0	; 63
 7e6:	cd bf       	out	0x3d, r28	; 61
 7e8:	df 91       	pop	r29
 7ea:	cf 91       	pop	r28
 7ec:	1f 91       	pop	r17
 7ee:	0f 91       	pop	r16
 7f0:	ff 90       	pop	r15
 7f2:	ef 90       	pop	r14
 7f4:	bf 90       	pop	r11
 7f6:	af 90       	pop	r10
 7f8:	9f 90       	pop	r9
 7fa:	8f 90       	pop	r8
 7fc:	7f 90       	pop	r7
 7fe:	6f 90       	pop	r6
 800:	5f 90       	pop	r5
 802:	4f 90       	pop	r4
 804:	08 95       	ret

00000806 <__udivmodsi4>:
 806:	a1 e2       	ldi	r26, 0x21	; 33
 808:	1a 2e       	mov	r1, r26
 80a:	aa 1b       	sub	r26, r26
 80c:	bb 1b       	sub	r27, r27
 80e:	fd 01       	movw	r30, r26
 810:	0d c0       	rjmp	.+26     	; 0x82c <__udivmodsi4_ep>

00000812 <__udivmodsi4_loop>:
 812:	aa 1f       	adc	r26, r26
 814:	bb 1f       	adc	r27, r27
 816:	ee 1f       	adc	r30, r30
 818:	ff 1f       	adc	r31, r31
 81a:	a2 17       	cp	r26, r18
 81c:	b3 07       	cpc	r27, r19
 81e:	e4 07       	cpc	r30, r20
 820:	f5 07       	cpc	r31, r21
 822:	20 f0       	brcs	.+8      	; 0x82c <__udivmodsi4_ep>
 824:	a2 1b       	sub	r26, r18
 826:	b3 0b       	sbc	r27, r19
 828:	e4 0b       	sbc	r30, r20
 82a:	f5 0b       	sbc	r31, r21

0000082c <__udivmodsi4_ep>:
 82c:	66 1f       	adc	r22, r22
 82e:	77 1f       	adc	r23, r23
 830:	88 1f       	adc	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	1a 94       	dec	r1
 836:	69 f7       	brne	.-38     	; 0x812 <__udivmodsi4_loop>
 838:	60 95       	com	r22
 83a:	70 95       	com	r23
 83c:	80 95       	com	r24
 83e:	90 95       	com	r25
 840:	9b 01       	movw	r18, r22
 842:	ac 01       	movw	r20, r24
 844:	bd 01       	movw	r22, r26
 846:	cf 01       	movw	r24, r30
 848:	08 95       	ret

0000084a <__divmodsi4>:
 84a:	05 2e       	mov	r0, r21
 84c:	97 fb       	bst	r25, 7
 84e:	1e f4       	brtc	.+6      	; 0x856 <__divmodsi4+0xc>
 850:	00 94       	com	r0
 852:	0e 94 3c 04 	call	0x878	; 0x878 <__negsi2>
 856:	57 fd       	sbrc	r21, 7
 858:	07 d0       	rcall	.+14     	; 0x868 <__divmodsi4_neg2>
 85a:	0e 94 03 04 	call	0x806	; 0x806 <__udivmodsi4>
 85e:	07 fc       	sbrc	r0, 7
 860:	03 d0       	rcall	.+6      	; 0x868 <__divmodsi4_neg2>
 862:	4e f4       	brtc	.+18     	; 0x876 <__divmodsi4_exit>
 864:	0c 94 3c 04 	jmp	0x878	; 0x878 <__negsi2>

00000868 <__divmodsi4_neg2>:
 868:	50 95       	com	r21
 86a:	40 95       	com	r20
 86c:	30 95       	com	r19
 86e:	21 95       	neg	r18
 870:	3f 4f       	sbci	r19, 0xFF	; 255
 872:	4f 4f       	sbci	r20, 0xFF	; 255
 874:	5f 4f       	sbci	r21, 0xFF	; 255

00000876 <__divmodsi4_exit>:
 876:	08 95       	ret

00000878 <__negsi2>:
 878:	90 95       	com	r25
 87a:	80 95       	com	r24
 87c:	70 95       	com	r23
 87e:	61 95       	neg	r22
 880:	7f 4f       	sbci	r23, 0xFF	; 255
 882:	8f 4f       	sbci	r24, 0xFF	; 255
 884:	9f 4f       	sbci	r25, 0xFF	; 255
 886:	08 95       	ret

00000888 <__umulhisi3>:
 888:	a2 9f       	mul	r26, r18
 88a:	b0 01       	movw	r22, r0
 88c:	b3 9f       	mul	r27, r19
 88e:	c0 01       	movw	r24, r0
 890:	a3 9f       	mul	r26, r19
 892:	70 0d       	add	r23, r0
 894:	81 1d       	adc	r24, r1
 896:	11 24       	eor	r1, r1
 898:	91 1d       	adc	r25, r1
 89a:	b2 9f       	mul	r27, r18
 89c:	70 0d       	add	r23, r0
 89e:	81 1d       	adc	r24, r1
 8a0:	11 24       	eor	r1, r1
 8a2:	91 1d       	adc	r25, r1
 8a4:	08 95       	ret

000008a6 <strcpy>:
 8a6:	fb 01       	movw	r30, r22
 8a8:	dc 01       	movw	r26, r24
 8aa:	01 90       	ld	r0, Z+
 8ac:	0d 92       	st	X+, r0
 8ae:	00 20       	and	r0, r0
 8b0:	e1 f7       	brne	.-8      	; 0x8aa <strcpy+0x4>
 8b2:	08 95       	ret

000008b4 <__itoa_ncheck>:
 8b4:	bb 27       	eor	r27, r27
 8b6:	4a 30       	cpi	r20, 0x0A	; 10
 8b8:	31 f4       	brne	.+12     	; 0x8c6 <__itoa_ncheck+0x12>
 8ba:	99 23       	and	r25, r25
 8bc:	22 f4       	brpl	.+8      	; 0x8c6 <__itoa_ncheck+0x12>
 8be:	bd e2       	ldi	r27, 0x2D	; 45
 8c0:	90 95       	com	r25
 8c2:	81 95       	neg	r24
 8c4:	9f 4f       	sbci	r25, 0xFF	; 255
 8c6:	0c 94 97 04 	jmp	0x92e	; 0x92e <__utoa_common>

000008ca <__ltoa_ncheck>:
 8ca:	bb 27       	eor	r27, r27
 8cc:	2a 30       	cpi	r18, 0x0A	; 10
 8ce:	51 f4       	brne	.+20     	; 0x8e4 <__ltoa_ncheck+0x1a>
 8d0:	99 23       	and	r25, r25
 8d2:	42 f4       	brpl	.+16     	; 0x8e4 <__ltoa_ncheck+0x1a>
 8d4:	bd e2       	ldi	r27, 0x2D	; 45
 8d6:	90 95       	com	r25
 8d8:	80 95       	com	r24
 8da:	70 95       	com	r23
 8dc:	61 95       	neg	r22
 8de:	7f 4f       	sbci	r23, 0xFF	; 255
 8e0:	8f 4f       	sbci	r24, 0xFF	; 255
 8e2:	9f 4f       	sbci	r25, 0xFF	; 255
 8e4:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <__ultoa_common>

000008e8 <__ultoa_ncheck>:
 8e8:	bb 27       	eor	r27, r27

000008ea <__ultoa_common>:
 8ea:	fa 01       	movw	r30, r20
 8ec:	a6 2f       	mov	r26, r22
 8ee:	62 17       	cp	r22, r18
 8f0:	71 05       	cpc	r23, r1
 8f2:	81 05       	cpc	r24, r1
 8f4:	91 05       	cpc	r25, r1
 8f6:	33 0b       	sbc	r19, r19
 8f8:	30 fb       	bst	r19, 0
 8fa:	66 f0       	brts	.+24     	; 0x914 <__ultoa_common+0x2a>
 8fc:	aa 27       	eor	r26, r26
 8fe:	66 0f       	add	r22, r22
 900:	77 1f       	adc	r23, r23
 902:	88 1f       	adc	r24, r24
 904:	99 1f       	adc	r25, r25
 906:	aa 1f       	adc	r26, r26
 908:	a2 17       	cp	r26, r18
 90a:	10 f0       	brcs	.+4      	; 0x910 <__ultoa_common+0x26>
 90c:	a2 1b       	sub	r26, r18
 90e:	63 95       	inc	r22
 910:	38 50       	subi	r19, 0x08	; 8
 912:	a9 f7       	brne	.-22     	; 0x8fe <__ultoa_common+0x14>
 914:	a0 5d       	subi	r26, 0xD0	; 208
 916:	aa 33       	cpi	r26, 0x3A	; 58
 918:	08 f0       	brcs	.+2      	; 0x91c <__ultoa_common+0x32>
 91a:	a9 5d       	subi	r26, 0xD9	; 217
 91c:	a1 93       	st	Z+, r26
 91e:	36 f7       	brtc	.-52     	; 0x8ec <__ultoa_common+0x2>
 920:	b1 11       	cpse	r27, r1
 922:	b1 93       	st	Z+, r27
 924:	10 82       	st	Z, r1
 926:	ca 01       	movw	r24, r20
 928:	0c 94 b0 04 	jmp	0x960	; 0x960 <strrev>

0000092c <__utoa_ncheck>:
 92c:	bb 27       	eor	r27, r27

0000092e <__utoa_common>:
 92e:	fb 01       	movw	r30, r22
 930:	55 27       	eor	r21, r21
 932:	aa 27       	eor	r26, r26
 934:	88 0f       	add	r24, r24
 936:	99 1f       	adc	r25, r25
 938:	aa 1f       	adc	r26, r26
 93a:	a4 17       	cp	r26, r20
 93c:	10 f0       	brcs	.+4      	; 0x942 <__utoa_common+0x14>
 93e:	a4 1b       	sub	r26, r20
 940:	83 95       	inc	r24
 942:	50 51       	subi	r21, 0x10	; 16
 944:	b9 f7       	brne	.-18     	; 0x934 <__utoa_common+0x6>
 946:	a0 5d       	subi	r26, 0xD0	; 208
 948:	aa 33       	cpi	r26, 0x3A	; 58
 94a:	08 f0       	brcs	.+2      	; 0x94e <__utoa_common+0x20>
 94c:	a9 5d       	subi	r26, 0xD9	; 217
 94e:	a1 93       	st	Z+, r26
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	79 f7       	brne	.-34     	; 0x932 <__utoa_common+0x4>
 954:	b1 11       	cpse	r27, r1
 956:	b1 93       	st	Z+, r27
 958:	11 92       	st	Z+, r1
 95a:	cb 01       	movw	r24, r22
 95c:	0c 94 b0 04 	jmp	0x960	; 0x960 <strrev>

00000960 <strrev>:
 960:	dc 01       	movw	r26, r24
 962:	fc 01       	movw	r30, r24
 964:	67 2f       	mov	r22, r23
 966:	71 91       	ld	r23, Z+
 968:	77 23       	and	r23, r23
 96a:	e1 f7       	brne	.-8      	; 0x964 <strrev+0x4>
 96c:	32 97       	sbiw	r30, 0x02	; 2
 96e:	04 c0       	rjmp	.+8      	; 0x978 <strrev+0x18>
 970:	7c 91       	ld	r23, X
 972:	6d 93       	st	X+, r22
 974:	70 83       	st	Z, r23
 976:	62 91       	ld	r22, -Z
 978:	ae 17       	cp	r26, r30
 97a:	bf 07       	cpc	r27, r31
 97c:	c8 f3       	brcs	.-14     	; 0x970 <strrev+0x10>
 97e:	08 95       	ret

00000980 <_exit>:
 980:	f8 94       	cli

00000982 <__stop_program>:
 982:	ff cf       	rjmp	.-2      	; 0x982 <__stop_program>
